package ows.sal.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.configurationprocessor.json.JSONException;
import org.springframework.http.*;

import org.springframework.stereotype.Service;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.HttpServerErrorException;
import org.springframework.web.client.ResourceAccessException;
import org.springframework.web.util.UriComponentsBuilder;
import org.springframework.web.client.RestTemplate;
import oxf.config.RestTemplateConfig;
import java.util.*;


@Slf4j
@RequiredArgsConstructor
@Service
public class HttpCallService {
    private final RestTemplateConfig restTemplateConfig;


    public Map<String, Object> getHttpCallGetData(String callUrl, String kunnr) {
        Map<String, Object> resultMap = new HashMap<String, Object>();

        try {
            RestTemplate restTemplate = restTemplateConfig.restTemplate();

            HttpHeaders headers = new HttpHeaders();
            headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));
            HttpEntity<?> httpEntity = new HttpEntity<>(null, headers);

            // Query Param 설정
            UriComponentsBuilder uriComponentsBuilder = UriComponentsBuilder.fromHttpUrl(callUrl)
                                                                            .queryParam("kunnr", kunnr);

            ResponseEntity<String> responseEntity =
                    restTemplate.exchange(uriComponentsBuilder.build().encode().toUri(), HttpMethod.GET, httpEntity, String.class);

            String resultStr = responseEntity.getBody();

            ObjectMapper objectMapper = new ObjectMapper();
            Object obj = objectMapper.readValue(resultStr, Object.class);
            resultMap.put("api", obj);

            log.debug(responseEntity.getBody());

        } catch (HttpClientErrorException | HttpServerErrorException e) {
            //resultMap.put("Status", e.getRawStatusCode());
            //resultMap.put("body"  , e.getStatusText());
            log.debug(e.toString());
        } catch (ResourceAccessException e) {
            resultMap.put("Status",  "999");
            resultMap.put("message", "CBS Server Connection Error");

            log.debug(e.toString());
            log.debug("서버 통신 Connection Error");
        } catch (Exception e) {
            //resultMap.put("Status", "999");
            //resultMap.put("body"  , "HttpCall Error");
            log.debug(e.toString());
        }

        return resultMap;
    }


    public Map<String, Object> getHttpCallPostData(String callUrl, String kunnr) throws JSONException {
        Map<String, Object> resultMap = new HashMap<String, Object>();

        try {
            RestTemplate restTemplate = restTemplateConfig.restTemplate();

            // Http Header 설정
            HttpHeaders header = new HttpHeaders();
            //header.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));
            header.setContentType(MediaType.APPLICATION_JSON);
            header.set("key", "value");

            // Http Body 설정
            //JSONObject bodyParam = new JSONObject();
            //bodyParam.put("kunnr", kunnr);

            Map<String, Object> bodyParam = new HashMap<String, Object>();
            bodyParam.put("kunnr", kunnr);;

            HttpEntity<?> httpEntity = new HttpEntity<>(bodyParam, header);

            // Query Param 설정
            UriComponentsBuilder uriComponentsBuilder = UriComponentsBuilder.fromHttpUrl(callUrl);
            ResponseEntity<String> responseEntity     =
                    restTemplate.exchange(uriComponentsBuilder.build().encode().toUri(), HttpMethod.POST, httpEntity, String.class);

            String resultStr = responseEntity.getBody();
            ObjectMapper objectMapper = new ObjectMapper();
            Object obj = objectMapper.readValue(resultStr, Object.class);
            resultMap.put("api", obj);

            log.debug(responseEntity.getBody());

        } catch (HttpClientErrorException | HttpServerErrorException e) {
            //resultMap.put("Status", e.getRawStatusCode());
            //resultMap.put("body"  , e.getStatusText());
            log.debug(e.toString());
        } catch (ResourceAccessException e) {
            log.debug(e.toString());
            log.debug("서버 통신 Connection Error");
        } catch (Exception e) {
            //resultMap.put("Status", "999");
            //resultMap.put("body"  , "HttpCall Error");
            log.debug(e.toString());
        }

        return resultMap;
    }
}