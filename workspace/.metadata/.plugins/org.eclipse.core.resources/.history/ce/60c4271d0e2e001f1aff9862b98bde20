package com.example.demo.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.example.demo.dto.Article;
import com.example.demo.dto.ResultDTO;
import com.example.demo.dto.UserDTO;
import com.example.demo.service.ArticleService;

import lombok.extern.slf4j.Slf4j;

@CrossOrigin(origins = "http://localhost:8800" )
@Controller
@Slf4j // 이걸 해야 log.info(..) 가 가능, 디버깅 용도
public class ArticleController {
	@Autowired
	ArticleService articleService;
	
	private ResultDTO rDto;

	@RequestMapping("/article/detail")
	public String showDetail(Model model, long id) {
		
		Article article = articleService.getOne(id);
		
		articleService.hitUp(id);

		model.addAttribute("article", article);

		return "article/detail";
	}
	
	@RequestMapping("/article/modify")
	public String showModify(Model model, long id) {
		Article article = articleService.getOne(id);

		model.addAttribute("article", article);

		return "article/modify";
	}
	
	@PostMapping("/findAll")
	public List<ResultDTO> findAll(Model model) {
		
        Map<String, Object> params = new HashMap<>();
		
		params.put("SCHEMA", "EDU");
		params.put("TABLE", "USER3");  
		
		List<UserDTO> list = articleService.getVue(params);		

	
		
		rDto = new ResultDTO();
		    List<UserDTO> resultList = uDao.findAll();
		    if(resultList != null){
		      rDto.setState(true);
		      rDto.setResult(resultList);
		    } else {
		      rDto.setState(false);
		    }
		    
		return rDto;
		
	}

	@RequestMapping("/article/list2")
	public String showList2(Model model) {
	    
		Map<String, Object> params = new HashMap<>();
		
		params.put("SCHEMA", "EDU");
		params.put("TABLE", "ARTICLE");        
        
        List<ArrayList> table_info = articleService.getHeader(params);
        
		List<ArrayList> list = articleService.getData(params);
		
		int totalCount = list.size();

		model.addAttribute("table_info", table_info);
		
		model.addAttribute("list", list);
		
		model.addAttribute("totalCount", totalCount);

		return "article/list2";
	}
	
	@RequestMapping("/article/list")
	public String showList(Model model) {
		
		Map<String, Object> params = new HashMap<>();
		
		params.put("SCHEMA", "EDU");
		params.put("TABLE", "ARTICLE");        
        
        List<ArrayList> table_info = articleService.getHeader(params);
        
		List<ArrayList> list = articleService.getData(params);
		
		int totalCount = list.size();

		model.addAttribute("table_info", table_info);
		
		model.addAttribute("list", list);
		
		model.addAttribute("totalCount", totalCount);

		return "article/list2";
	}


	@RequestMapping("/article/add")
	public String showAdd() {
		return "article/add";
	}
	
	@RequestMapping("/article/doModify")
	@ResponseBody
	public String doModify(@RequestParam Map<String, Object> param, long id) {
		articleService.modify(param);

		String msg = id + "번 게시물이 수정되었습니다.";

		StringBuilder sb = new StringBuilder();

		sb.append("alert('" + msg + "');");
		sb.append("location.replace('./detail?id=" + id + "');");

		sb.insert(0, "<script>");
		sb.append("</script>");

		return sb.toString();
	}

	@RequestMapping("/article/doAdd")
	@ResponseBody
	public String doAdd(@RequestParam Map<String, Object> param) {
		long newId = articleService.add(param);

		String msg = newId + "번 게시물이 추가되었습니다.";

		StringBuilder sb = new StringBuilder();

		sb.append("alert('" + msg + "');");
		sb.append("location.replace('./detail?id=" + newId + "');");

		sb.insert(0, "<script>");
		sb.append("</script>");

		return sb.toString();
	}

	@RequestMapping("/article/doDelete")
	@ResponseBody
	public String doDelete(long id) {
		articleService.delete(id);

		String msg = id + "번 게시물이 삭제되었습니다.";

		StringBuilder sb = new StringBuilder();

		sb.append("alert('" + msg + "');");
		sb.append("location.replace('./list');");

		sb.insert(0, "<script>");
		sb.append("</script>");

		return sb.toString();
	}
}
